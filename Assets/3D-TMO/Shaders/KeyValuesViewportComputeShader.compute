// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel KeyValues

float _MinLogLum;
float _MaxLogLum;
Texture2D<float4> _Source;
RWStructuredBuffer<uint> _KeyValues;

[numthreads(16, 16, 1)]
void KeyValues(uint3 id : SV_DispatchThreadID)
{
	// Compute luminance value (log scale)
	// Min value : -5.0
	// Max value : 5.0
	float4 color = _Source[id.xy];
	float lum = (0.2126 * color.r) + (0.7152 * color.g) + (0.0722 * color.b);

	float logLum = log(lum + 1e-5);
	float normalizedLogLum = (logLum - _MinLogLum) / (_MaxLogLum - _MinLogLum);
	normalizedLogLum = saturate(normalizedLogLum);

	uint lumIntEncode = (uint)(normalizedLogLum * pow(2, 10));

	InterlockedMin(_KeyValues[0], lumIntEncode);
	InterlockedMax(_KeyValues[1], lumIntEncode);
	InterlockedAdd(_KeyValues[2], lumIntEncode);

	// High precision Min/Max... useless
	//u0 = _KeyValuesLow[0];
	//u1 = _KeyValuesHigh[0];
	//d = asdouble(u0, u1);
	//d = min(lum, d);
	//asuint(d, u0, u1);
	//InterlockedExchange(_KeyValuesLow[0], u0, n0);
	//InterlockedExchange(_KeyValuesHigh[0], u1, n1);
}
